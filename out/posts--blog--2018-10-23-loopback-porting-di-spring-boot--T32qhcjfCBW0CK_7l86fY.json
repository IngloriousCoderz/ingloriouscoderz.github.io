{"data":{"title":"Loopback 4 è un porting di Spring Boot","description":"IBM ha rovinato un bellissimo prodotto, è ora di cercare altrove.","author":"IceOnFire","_entry":"posts/blog/2018-10-23-loopback-porting-di-spring-boot.md","page":"post","name":"loopback-porting-di-spring-boot","category":"blog","date":"2018-10-23T00:00:00.000Z","url":"/blog/loopback-porting-di-spring-boot"},"content":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Se c'è una cosa buona che il ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":30,"offset":30}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4"},"children":[{"type":"text","value":"faticoso ecosistema JavaScript","position":{"start":{"line":2,"column":31,"offset":31},"end":{"line":2,"column":61,"offset":61}}}],"position":{"start":{"line":2,"column":30,"offset":30},"end":{"line":2,"column":128,"offset":128}}},{"type":"text","value":" ha portato nelle nostre vite è un ritorno alla ","position":{"start":{"line":2,"column":128,"offset":128},"end":{"line":2,"column":176,"offset":176}}},{"type":"element","tagName":"a","properties":{"href":"https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5"},"children":[{"type":"text","value":"programmazione funzionale","position":{"start":{"line":2,"column":177,"offset":177},"end":{"line":2,"column":202,"offset":202}}}],"position":{"start":{"line":2,"column":176,"offset":176},"end":{"line":2,"column":275,"offset":275}}},{"type":"text","value":". Dopo anni e anni a scervellarsi su oggetti, classi e design pattern, Facebook con i suoi ","position":{"start":{"line":2,"column":275,"offset":275},"end":{"line":2,"column":366,"offset":366}}},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/"},"children":[{"type":"text","value":"React","position":{"start":{"line":2,"column":367,"offset":367},"end":{"line":2,"column":372,"offset":372}}}],"position":{"start":{"line":2,"column":366,"offset":366},"end":{"line":2,"column":395,"offset":395}}},{"type":"text","value":" e ","position":{"start":{"line":2,"column":395,"offset":395},"end":{"line":2,"column":398,"offset":398}}},{"type":"element","tagName":"a","properties":{"href":"https://redux.js.org/"},"children":[{"type":"text","value":"Redux","position":{"start":{"line":2,"column":399,"offset":399},"end":{"line":2,"column":404,"offset":404}}}],"position":{"start":{"line":2,"column":398,"offset":398},"end":{"line":2,"column":428,"offset":428}}},{"type":"text","value":" ci ha convinti a fare marcia indietro e riconsiderare le funzioni pure, l'immutabilità e la composizione a scapito dell'ereditarietà, delle annotation e della dependency injection. A un tratto il codice diventa potente, performante, leggibile e testabile come non lo è mai stato, e la programmazione orientata agli oggetti (o meglio, alle classi) pare solo un brutto ricordo.","position":{"start":{"line":2,"column":428,"offset":428},"end":{"line":2,"column":804,"offset":804}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":804,"offset":804}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Questo almeno per quanto riguarda il front end. E sul back end? Personalmente per progetti un po' più complessi la mia scelta è ricaduta su ","position":{"start":{"line":4,"column":1,"offset":806},"end":{"line":4,"column":141,"offset":946}}},{"type":"element","tagName":"a","properties":{"href":"https://loopback.io/"},"children":[{"type":"text","value":"Loopback 3","position":{"start":{"line":4,"column":142,"offset":947},"end":{"line":4,"column":152,"offset":957}}}],"position":{"start":{"line":4,"column":141,"offset":946},"end":{"line":4,"column":175,"offset":980}}},{"type":"text","value":", framework di ","position":{"start":{"line":4,"column":175,"offset":980},"end":{"line":4,"column":190,"offset":995}}},{"type":"element","tagName":"a","properties":{"href":"https://strongloop.com/"},"children":[{"type":"text","value":"Strongloop","position":{"start":{"line":4,"column":191,"offset":996},"end":{"line":4,"column":201,"offset":1006}}}],"position":{"start":{"line":4,"column":190,"offset":995},"end":{"line":4,"column":227,"offset":1032}}},{"type":"text","value":" (poi acquisita da ","position":{"start":{"line":4,"column":227,"offset":1032},"end":{"line":4,"column":246,"offset":1051}}},{"type":"element","tagName":"a","properties":{"href":"https://www.ibm.com/"},"children":[{"type":"text","value":"IBM","position":{"start":{"line":4,"column":247,"offset":1052},"end":{"line":4,"column":250,"offset":1055}}}],"position":{"start":{"line":4,"column":246,"offset":1051},"end":{"line":4,"column":273,"offset":1078}}},{"type":"text","value":") che, essendo fortemente basato su ","position":{"start":{"line":4,"column":273,"offset":1078},"end":{"line":4,"column":309,"offset":1114}}},{"type":"element","tagName":"a","properties":{"href":"https://expressjs.com/"},"children":[{"type":"text","value":"Express","position":{"start":{"line":4,"column":310,"offset":1115},"end":{"line":4,"column":317,"offset":1122}}}],"position":{"start":{"line":4,"column":309,"offset":1114},"end":{"line":4,"column":342,"offset":1147}}},{"type":"text","value":", riesce a rendere la creazione di un server Node immediata e la sua personalizzazione perlomeno fattibile. Basta definire un modello in un linguaggio che sostanzialmente è un'estensione di ","position":{"start":{"line":4,"column":342,"offset":1147},"end":{"line":4,"column":532,"offset":1337}}},{"type":"element","tagName":"a","properties":{"href":"https://json-schema.org/"},"children":[{"type":"text","value":"JSON Schema","position":{"start":{"line":4,"column":533,"offset":1338},"end":{"line":4,"column":544,"offset":1349}}}],"position":{"start":{"line":4,"column":532,"offset":1337},"end":{"line":4,"column":571,"offset":1376}}},{"type":"text","value":" e si ha automaticamente un servizio REST che fa tutte le operazioni CRUD sul database. Se poi si vogliono definire funzioni custom si possono creare degli hook a vari livelli dell'architettura, oppure dei middleware in stile Express.","position":{"start":{"line":4,"column":571,"offset":1376},"end":{"line":4,"column":805,"offset":1610}}}],"position":{"start":{"line":4,"column":1,"offset":806},"end":{"line":4,"column":805,"offset":1610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Non vedevo l'ora, quindi, di mettere le mani sulla ","position":{"start":{"line":6,"column":1,"offset":1612},"end":{"line":6,"column":52,"offset":1663}}},{"type":"element","tagName":"a","properties":{"href":"http://v4.loopback.io/"},"children":[{"type":"text","value":"versione 4 di Loopback","position":{"start":{"line":6,"column":53,"offset":1664},"end":{"line":6,"column":75,"offset":1686}}}],"position":{"start":{"line":6,"column":52,"offset":1663},"end":{"line":6,"column":100,"offset":1711}}},{"type":"text","value":", uscita ufficialmente il ","position":{"start":{"line":6,"column":100,"offset":1711},"end":{"line":6,"column":126,"offset":1737}}},{"type":"element","tagName":"a","properties":{"href":"https://strongloop.com/strongblog/loopback-4-ga"},"children":[{"type":"text","value":"10 ottobre 2018","position":{"start":{"line":6,"column":127,"offset":1738},"end":{"line":6,"column":142,"offset":1753}}}],"position":{"start":{"line":6,"column":126,"offset":1737},"end":{"line":6,"column":192,"offset":1803}}},{"type":"text","value":". Mi aspettavo più potenza, una migliore documentazione, magari il supporto nativo a GraphQL. Ma soprattutto che rimanesse semplice ed elegante com'era. E invece proprio quest'ultimo punto è stato uno stravoglimento totale, per me incomprensibile. Loopback 4 fa uso di ","position":{"start":{"line":6,"column":192,"offset":1803},"end":{"line":6,"column":461,"offset":2072}}},{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/"},"children":[{"type":"text","value":"TypeScript","position":{"start":{"line":6,"column":462,"offset":2073},"end":{"line":6,"column":472,"offset":2083}}}],"position":{"start":{"line":6,"column":461,"offset":2072},"end":{"line":6,"column":506,"offset":2117}}},{"type":"text","value":" (e vabbè, se proprio non potete fare a meno della tipizzazione statica), dei decoratori (e vabbè, basta non abusarne), delle classi (taaaante classi) e ha addirittura un suo sistema di dependency injection!","position":{"start":{"line":6,"column":506,"offset":2117},"end":{"line":6,"column":713,"offset":2324}}}],"position":{"start":{"line":6,"column":1,"offset":1612},"end":{"line":6,"column":713,"offset":2324}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Da una parte sembra il miglior amico di ","position":{"start":{"line":8,"column":1,"offset":2326},"end":{"line":8,"column":41,"offset":2366}}},{"type":"element","tagName":"a","properties":{"href":"https://angular.io/"},"children":[{"type":"text","value":"Angular","position":{"start":{"line":8,"column":42,"offset":2367},"end":{"line":8,"column":49,"offset":2374}}}],"position":{"start":{"line":8,"column":41,"offset":2366},"end":{"line":8,"column":71,"offset":2396}}},{"type":"text","value":", framework che non riesco proprio a digerire, dall'altra sembra un porting di ","position":{"start":{"line":8,"column":71,"offset":2396},"end":{"line":8,"column":150,"offset":2475}}},{"type":"element","tagName":"a","properties":{"href":"http://spring.io/projects/spring-boot"},"children":[{"type":"text","value":"Spring Boot","position":{"start":{"line":8,"column":151,"offset":2476},"end":{"line":8,"column":162,"offset":2487}}}],"position":{"start":{"line":8,"column":150,"offset":2475},"end":{"line":8,"column":202,"offset":2527}}},{"type":"text","value":". Pare come se i Javisti si fossero riversati nel salotto JavaScript e avessero detto: \"Non mi piace qui, dobbiamo riarredare\".","position":{"start":{"line":8,"column":202,"offset":2527},"end":{"line":8,"column":329,"offset":2654}}}],"position":{"start":{"line":8,"column":1,"offset":2326},"end":{"line":8,"column":329,"offset":2654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Un esempio? Questo è il codice necessario a definire una relazione uno-a-molti in Loopback 3:","position":{"start":{"line":10,"column":1,"offset":2656},"end":{"line":10,"column":94,"offset":2749}}}],"position":{"start":{"line":10,"column":1,"offset":2656},"end":{"line":10,"column":94,"offset":2749}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-json"]},"children":[{"type":"text","value":"{\n  \"name\": \"TodoList\",\n  \"base\": \"PersistedModel\",\n  \"relations\": {\n    \"todos\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Todo\",\n      \"foreignKey\": \"todoListId\"\n    }\n  }\n}\n"}],"position":{"start":{"line":12,"column":1,"offset":2751},"end":{"line":24,"column":4,"offset":2939}}}],"position":{"start":{"line":12,"column":1,"offset":2751},"end":{"line":24,"column":4,"offset":2939}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ecco lo stesso tipo di relazione definito in Loopback 4:","position":{"start":{"line":26,"column":1,"offset":2941},"end":{"line":26,"column":57,"offset":2997}}}],"position":{"start":{"line":26,"column":1,"offset":2941},"end":{"line":26,"column":57,"offset":2997}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"import {\n  DefaultCrudRepository,\n  HasManyRepositoryFactory,\n  repository,\n} from '@loopback/repository';\nimport {TodoList, Todo} from '../models';\nimport {DbDataSource} from '../datasources';\nimport {inject, Getter} from '@loopback/core';\nimport {TodoRepository} from './todo.repository';\n\nexport class TodoListRepository extends DefaultCrudRepository<\n  TodoList,\n  typeof TodoList.prototype.id\n> {\n  public readonly todos: HasManyRepositoryFactory<\n    Todo,\n    typeof TodoList.prototype.id\n  >;\n\n  constructor(\n    @inject('datasources.db') dataSource: DbDataSource,\n    @repository.getter(TodoRepository)\n    protected todoRepositoryGetter: Getter<TodoRepository>,\n  ) {\n    super(TodoList, dataSource);\n    this.todos = this._createHasManyRepositoryFactoryFor(\n      'todos',\n      todoRepositoryGetter,\n    );\n  }\n}\n"}],"position":{"start":{"line":28,"column":1,"offset":2999},"end":{"line":60,"column":4,"offset":3833}}}],"position":{"start":{"line":28,"column":1,"offset":2999},"end":{"line":60,"column":4,"offset":3833}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"L'esempio è preso dal ","position":{"start":{"line":62,"column":1,"offset":3835},"end":{"line":62,"column":23,"offset":3857}}},{"type":"element","tagName":"a","properties":{"href":"https://loopback.io/doc/en/lb4/todo-list-tutorial-repository.html"},"children":[{"type":"text","value":"tutorial ufficiale","position":{"start":{"line":62,"column":24,"offset":3858},"end":{"line":62,"column":42,"offset":3876}}}],"position":{"start":{"line":62,"column":23,"offset":3857},"end":{"line":62,"column":110,"offset":3944}}},{"type":"text","value":", che al momento in cui scrivo è anche errato (ho dovuto aggiustare guardando il ","position":{"start":{"line":62,"column":110,"offset":3944},"end":{"line":62,"column":191,"offset":4025}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/strongloop/loopback-next/blob/master/examples/todo-list/src/repositories/todo-list.repository.ts"},"children":[{"type":"text","value":"sorgente degli esempi","position":{"start":{"line":62,"column":192,"offset":4026},"end":{"line":62,"column":213,"offset":4047}}}],"position":{"start":{"line":62,"column":191,"offset":4025},"end":{"line":62,"column":331,"offset":4165}}},{"type":"text","value":").","position":{"start":{"line":62,"column":331,"offset":4165},"end":{"line":62,"column":333,"offset":4167}}}],"position":{"start":{"line":62,"column":1,"offset":3835},"end":{"line":62,"column":333,"offset":4167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Inoltre per creare un unico endpoint REST è necessario:","position":{"start":{"line":64,"column":1,"offset":4169},"end":{"line":64,"column":56,"offset":4224}}}],"position":{"start":{"line":64,"column":1,"offset":4169},"end":{"line":64,"column":56,"offset":4224}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Creare una classe di modello","position":{"start":{"line":66,"column":4,"offset":4229},"end":{"line":66,"column":32,"offset":4257}}}],"position":{"start":{"line":66,"column":1,"offset":4226},"end":{"line":66,"column":32,"offset":4257}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Creare una classe datasource","position":{"start":{"line":67,"column":4,"offset":4261},"end":{"line":67,"column":32,"offset":4289}}}],"position":{"start":{"line":67,"column":1,"offset":4258},"end":{"line":67,"column":32,"offset":4289}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Creare una classe repository","position":{"start":{"line":68,"column":4,"offset":4293},"end":{"line":68,"column":32,"offset":4321}}}],"position":{"start":{"line":68,"column":1,"offset":4290},"end":{"line":68,"column":32,"offset":4321}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Creare una classe controller","position":{"start":{"line":69,"column":4,"offset":4325},"end":{"line":69,"column":32,"offset":4353}}}],"position":{"start":{"line":69,"column":1,"offset":4322},"end":{"line":69,"column":32,"offset":4353}}},{"type":"text","value":"\n"}],"position":{"start":{"line":66,"column":1,"offset":4226},"end":{"line":69,"column":32,"offset":4353}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"La classe modello descrive le proprietà del modello tramite attributi di istanza e decoratori, mentre prima bastava un po' di JSON.","position":{"start":{"line":71,"column":1,"offset":4355},"end":{"line":71,"column":132,"offset":4486}}}],"position":{"start":{"line":71,"column":1,"offset":4355},"end":{"line":71,"column":132,"offset":4486}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"La classe datasource serve solo a iniettare la configurazione JSON simile a quella che c'era in Loopback 3.","position":{"start":{"line":73,"column":1,"offset":4488},"end":{"line":73,"column":108,"offset":4595}}}],"position":{"start":{"line":73,"column":1,"offset":4488},"end":{"line":73,"column":108,"offset":4595}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"La classe repository serve solo a iniettare la classe datasource.","position":{"start":{"line":75,"column":1,"offset":4597},"end":{"line":75,"column":66,"offset":4662}}}],"position":{"start":{"line":75,"column":1,"offset":4597},"end":{"line":75,"column":66,"offset":4662}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"La classe controller espone tutti i metodi CRUD di base, oportunamente decorati, risultando in circa 130 righe di codice quando in Loopback 3 ne servivano 0.","position":{"start":{"line":77,"column":1,"offset":4664},"end":{"line":77,"column":158,"offset":4821}}}],"position":{"start":{"line":77,"column":1,"offset":4664},"end":{"line":77,"column":158,"offset":4821}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Parafrasando Bender, mi viene voglia di creare un Loopback tutto mio, con blackjack e squillo di lusso. Anzi, senza blackjack e neanche le squillo, ma almeno più funzionale.","position":{"start":{"line":79,"column":1,"offset":4823},"end":{"line":79,"column":174,"offset":4996}}}],"position":{"start":{"line":79,"column":1,"offset":4823},"end":{"line":79,"column":174,"offset":4996}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"# IceOnFire\n"}],"position":{"start":{"line":81,"column":1,"offset":4998},"end":{"line":83,"column":4,"offset":5017}}}],"position":{"start":{"line":81,"column":1,"offset":4998},"end":{"line":83,"column":4,"offset":5017}}}],"data":{"quirksMode":false},"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":1,"offset":0}}},"raw":"\nSe c'è una cosa buona che il [faticoso ecosistema JavaScript](https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4) ha portato nelle nostre vite è un ritorno alla [programmazione funzionale](https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5). Dopo anni e anni a scervellarsi su oggetti, classi e design pattern, Facebook con i suoi [React](https://reactjs.org/) e [Redux](https://redux.js.org/) ci ha convinti a fare marcia indietro e riconsiderare le funzioni pure, l'immutabilità e la composizione a scapito dell'ereditarietà, delle annotation e della dependency injection. A un tratto il codice diventa potente, performante, leggibile e testabile come non lo è mai stato, e la programmazione orientata agli oggetti (o meglio, alle classi) pare solo un brutto ricordo.\n\nQuesto almeno per quanto riguarda il front end. E sul back end? Personalmente per progetti un po' più complessi la mia scelta è ricaduta su [Loopback 3](https://loopback.io/), framework di [Strongloop](https://strongloop.com/) (poi acquisita da [IBM](https://www.ibm.com/)) che, essendo fortemente basato su [Express](https://expressjs.com/), riesce a rendere la creazione di un server Node immediata e la sua personalizzazione perlomeno fattibile. Basta definire un modello in un linguaggio che sostanzialmente è un'estensione di [JSON Schema](https://json-schema.org/) e si ha automaticamente un servizio REST che fa tutte le operazioni CRUD sul database. Se poi si vogliono definire funzioni custom si possono creare degli hook a vari livelli dell'architettura, oppure dei middleware in stile Express.\n\nNon vedevo l'ora, quindi, di mettere le mani sulla [versione 4 di Loopback](http://v4.loopback.io/), uscita ufficialmente il [10 ottobre 2018](https://strongloop.com/strongblog/loopback-4-ga). Mi aspettavo più potenza, una migliore documentazione, magari il supporto nativo a GraphQL. Ma soprattutto che rimanesse semplice ed elegante com'era. E invece proprio quest'ultimo punto è stato uno stravoglimento totale, per me incomprensibile. Loopback 4 fa uso di [TypeScript](https://www.typescriptlang.org/) (e vabbè, se proprio non potete fare a meno della tipizzazione statica), dei decoratori (e vabbè, basta non abusarne), delle classi (taaaante classi) e ha addirittura un suo sistema di dependency injection!\n\nDa una parte sembra il miglior amico di [Angular](https://angular.io/), framework che non riesco proprio a digerire, dall'altra sembra un porting di [Spring Boot](http://spring.io/projects/spring-boot). Pare come se i Javisti si fossero riversati nel salotto JavaScript e avessero detto: \"Non mi piace qui, dobbiamo riarredare\".\n\nUn esempio? Questo è il codice necessario a definire una relazione uno-a-molti in Loopback 3:\n\n```json\n{\n  \"name\": \"TodoList\",\n  \"base\": \"PersistedModel\",\n  \"relations\": {\n    \"todos\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Todo\",\n      \"foreignKey\": \"todoListId\"\n    }\n  }\n}\n```\n\nEcco lo stesso tipo di relazione definito in Loopback 4:\n\n```js\nimport {\n  DefaultCrudRepository,\n  HasManyRepositoryFactory,\n  repository,\n} from '@loopback/repository';\nimport {TodoList, Todo} from '../models';\nimport {DbDataSource} from '../datasources';\nimport {inject, Getter} from '@loopback/core';\nimport {TodoRepository} from './todo.repository';\n\nexport class TodoListRepository extends DefaultCrudRepository<\n  TodoList,\n  typeof TodoList.prototype.id\n> {\n  public readonly todos: HasManyRepositoryFactory<\n    Todo,\n    typeof TodoList.prototype.id\n  >;\n\n  constructor(\n    @inject('datasources.db') dataSource: DbDataSource,\n    @repository.getter(TodoRepository)\n    protected todoRepositoryGetter: Getter<TodoRepository>,\n  ) {\n    super(TodoList, dataSource);\n    this.todos = this._createHasManyRepositoryFactoryFor(\n      'todos',\n      todoRepositoryGetter,\n    );\n  }\n}\n```\n\nL'esempio è preso dal [tutorial ufficiale](https://loopback.io/doc/en/lb4/todo-list-tutorial-repository.html), che al momento in cui scrivo è anche errato (ho dovuto aggiustare guardando il [sorgente degli esempi](https://github.com/strongloop/loopback-next/blob/master/examples/todo-list/src/repositories/todo-list.repository.ts)).\n\nInoltre per creare un unico endpoint REST è necessario:\n\n1. Creare una classe di modello\n2. Creare una classe datasource\n3. Creare una classe repository\n4. Creare una classe controller\n\nLa classe modello descrive le proprietà del modello tramite attributi di istanza e decoratori, mentre prima bastava un po' di JSON.\n\nLa classe datasource serve solo a iniettare la configurazione JSON simile a quella che c'era in Loopback 3.\n\nLa classe repository serve solo a iniettare la classe datasource.\n\nLa classe controller espone tutti i metodi CRUD di base, oportunamente decorati, risultando in circa 130 righe di codice quando in Loopback 3 ne servivano 0.\n\nParafrasando Bender, mi viene voglia di creare un Loopback tutto mio, con blackjack e squillo di lusso. Anzi, senza blackjack e neanche le squillo, ma almeno più funzionale.\n\n```\n# IceOnFire\n```\n"}